<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://onebowman.github.io</id>
    <title>Gridea</title>
    <updated>2020-02-20T11:22:17.951Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://onebowman.github.io"/>
    <link rel="self" href="https://onebowman.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://onebowman.github.io/images/avatar.png</logo>
    <icon>https://onebowman.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[数据结构(一) 动态数组]]></title>
        <id>https://onebowman.github.io/post/shu-ju-jie-gou-yi-dong-tai-shu-zu/</id>
        <link href="https://onebowman.github.io/post/shu-ju-jie-gou-yi-dong-tai-shu-zu/">
        </link>
        <updated>2020-02-20T11:10:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="线性表">线性表</h2>
<p>线性表是具有 n 个相同类型元素的有限序列<br>
常见的线性表包括：</p>
<ul>
<li>数组</li>
<li>链表</li>
<li>队列</li>
<li>栈</li>
<li>哈希表</li>
</ul>
<h4 id="接口设计">接口设计</h4>
<pre><code class="language-java">interface MyList&lt;E&gt;{
//元素不存在则返回的索引值
int ELEMENT_NOT_FOUND_INDEX_RESULT = -1;
//元素数量
int size();
//是否为空
boolean isEmpty();
//是否包含某元素
boolean contains(E e);
//添加元素到末尾
void add(E e);
//将元素添加到index位置
void add(int index, E e);
//获取索引位置的元素
E get(int index);
//给对应索引位置的元素赋值
E set(int index, E e);
//删除并返回某位置上的元素
E remove(int index);
//返回元素对应的索引位置 
int indexOf(E e);
//清空
void clear();
}
</code></pre>
<p>其中有部分方法比较简单或者可以通过调用其他方法来实现,所以可以用一个抽象类来实现部分方法<br>
公共方法的简单实现抽象类</p>
<pre><code class="language-java">public abstract class MyAbstractList&lt;E&gt; implements MyList&lt;E&gt; {
    //元素数量
    protected int size;
    public int size(){
        return this.size;
    }
    public boolean isEmpty(){
        return this.size == 0;
    }
    public void add(E e){
        this.add(this.size, e);
    }
    public boolean contains(E e){
        return this.indexOf(e) != ELEMENT_NOT_FOUND_INDEX_RESULT;
    }
}
</code></pre>
<h3 id="动态数组">动态数组</h3>
<p><strong>数组</strong>是一种顺序存储的线性表，所有元素的内存地址是连续的</p>
<p>数组的优点是通过索引来访问其中的元素，数组中的元素类型相同，通过数组首地址与索引以及元素的长度可以计算出要访问元素的地址且与数据规模无关,访问的复杂度为O(1)</p>
<p>数组的缺点是初始化时需要指定长度，无法动态改变<br>
正式开始编写动态数组的代码 类名为MyArrayList<br>
内部使用数组来做数据的容器</p>
<h5 id="构造方法">构造方法</h5>
<p>在初始化的时候需要指定数组的长度,将其作为一个常量,并默认指定为10<br>
添加一个构造方法,可以在初始化的时候指定长度,但当指定的长度小于默认长度的时候 依然使用默认长度</p>
<pre><code class="language-java">public class MyArrayList&lt;E&gt; extends MyAbstractDynamicArray&lt;E&gt;{
    //数组默认的大小
    protected static int INITIAL_SIZE = 10;
    //存放数据的容器
    E[] elements;
    
    public MyArrayList(int capacity) { 
    capacity = capacity &lt; DEFAULT_INIT_CAPACITY ? DEFAULT_INIT_CAPACITY : capacity;   
    elements = (E[]) new Object[capacity];
    }

    public MyArrayList() {
        this(DEFAULT_INIT_CAPACITY);
        }
    
}
</code></pre>
<h5 id="indexof方法">indexOf方法</h5>
<p>判断某个元素是否存在于数组之中,需要遍历数组,并判断当前元素是否与给定元素相同,此时需要调用equals方法,由于给定的元素或者数组中的元素均可能为null,所以需要将为null的情况单独进行判断</p>
<pre><code class="language-java">public int indexOf(E e){
    if (e == null) {
            for (int i = 0; i &lt; size; i++) 
                if (elements[i] == null) return i;
        } else {
            for (int i = 0; i &lt; size; i++)
                if (e.equals(elements[i])) return i;
        }
        return ELEMENT_NOT_FOUND_INDEX_RESULT;
}
</code></pre>
<h5 id="get方法">get方法</h5>
<p>get方法获取对应索引位置上的元素,需要先判断索引值是否有效<br>
索引值必须大于0且小于size 如果索引值无效 则抛出异常<br>
由于所有的操作中都可能用到这个方法 因此将它放在抽象类中</p>
<pre><code class="language-java">protected void rangeCheck(int index) {
    if (index &lt; 0 || index &gt;= size)
    throw new  ndexOutOfBoundsException(&quot;size &quot; + this.size + &quot;, want &quot; + index);  
    }
</code></pre>
<pre><code class="language-java">public E get(int index){
    rangeCheck(index);
    return elements[index];
}
</code></pre>
<h5 id="set方法">set方法</h5>
<p>set 方法 也需要先判断索引值有效 然后改变对应位置的索引值并返回原来的值</p>
<pre><code class="language-java">public E set(int index, E e) {
        rangeCheck(index);
        E temp = elements[index];
        elements[index] = e;
        return temp;
    }
</code></pre>
<h5 id="add方法">add方法</h5>
<p>add方法 首先需要校验索引值,之前不同的是，添加时索引值是可以等于size的,即为往最后添加,因此在抽象类中增加一个方法rangeCheckForAdd</p>
<pre><code class="language-java"> protected void rangeCheckForAdd(int index) {
        if (index &lt; 0 || index &gt; size) {
            throw new IndexOutOfBoundsException(&quot;size &quot; + this.size + &quot;, want &quot; + index);
        }
    }
</code></pre>
<p>索引值有效,则需要判断容量是否足够</p>
<ul>
<li>如果容量不够,则需要扩容处理,新建一个容量更大的数组,并把原来的数组拷贝过去<br>
<img src="https://onebowman.github.io/post-images/1582197215666.png" alt="数组的扩容操作" loading="lazy"><br>
将其封装成一个方法 此处会直接将原有容量扩大1.5倍</li>
</ul>
<pre><code class="language-java"> private void ensureCapacity(int capacity) {
        int oldCapacity = this.elements.length;
        if (oldCapacity &lt; capacity) {
            int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);
            E[] newElements = (E[]) new Object[newCapacity];
                /*
        使用copyarray方法能够提高性能,下面的for循环操作等同于
       System.arraycopy(elements, 0, newElements, 0, size);
    */
            for(int i=0;i&lt;size;i++){
                newElements[i] = elements[i];
            }
            this.elements = newElements;
        }
    }
</code></pre>
<ul>
<li>如果容量足够,则需要将要添加位置之后的所有元素后移一位 然后将元素添加进去,并使size+1<br>
<img src="https://onebowman.github.io/post-images/1582197263244.png" alt="数组的插入操作" loading="lazy"><br>
代码如下</li>
</ul>
<pre><code class="language-java">public void add(int index, E e){
    rangeCheckForAdd(index);
    ensureCapacity(size + 1);
    /*
        使用copyarray方法能够提高性能,下面的for循环操作等同于
        System.arraycopy(this.elements, index, this.elements, index + 1, this.size - index);
    */
    for (int i = size; i &gt; index; i--)
        elements[i] = elements[i - 1];
    elements[index] = e;
    size++;
}
</code></pre>
<h5 id="remove方法">remove方法</h5>
<ol>
<li>首先校验索引有效</li>
<li>整体移动索引值之后的所有元素覆盖前一位<br>
<img src="https://onebowman.github.io/post-images/1582197339486.png" alt="数组删除元素示意图" loading="lazy"></li>
<li>将最后一位置为null,size-1</li>
<li>此步可选 如果当前使用的容量较小 则新建一个数组,避免空间浪费</li>
</ol>
<pre><code class="language-java">public E remove(int index){
     rangeCheck(index);
        E e = this.elements[index];
        for(int i=index+1;i&lt;size;i++){
            elements[i-1] = elements[i];
        }
        this.elements[this.size - 1] = null;
        this.size--;
        this.trim();
        return e;
}
//如果当前使用的容量小于等于总容量的一半 且大于默认容量 则进行缩容操作
public void trim(){
        int capacity = this.elements.length;
        int newCapacity = capacity &gt;&gt; 1;
        if (this.size &gt;= newCapacity || capacity &lt;= DEFAULT_INIT_CAPACITY) {
            return;
        }
        E[] newElements = (E[]) new Object[newCapacity];
        System.arraycopy(this.elements, 0, newElements, 0, this.size);
        elements = newElements;
}
</code></pre>
<p>详细代码与测试代码见 <a href="https://github.com/onebowman/BlogCode.git">github</a></p>
]]></content>
    </entry>
</feed>